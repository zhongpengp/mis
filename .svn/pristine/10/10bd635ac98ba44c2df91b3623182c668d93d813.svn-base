package baseMachineMng.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileUploadException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import com.alibaba.fastjson.JSON;

import baseMachineMng.service.FileUploadService;
import baseMachineMng.service.ProjectMachineImportService;
import baseMachineMng.service.ReadExcelService;
import baseMachineMng.vo.ImportProjectMachineInfoReturnVO;
import baseMachineMng.vo.ImportProjectMachineInfo_gsReturnVO;
import baseMachineMng.vo.Project_Instrument_Info;
import baseMachineMng.vo.Project_Instrument_Info_Temp;
import baseMachineMng.vo.SendOutProjectMachineInfo;
import baseMachineMng.vo.SendOutProjectMachineInfo_gs;

@Controller
@RequestMapping("/projectMachineImportController")
@EnableWebMvc
public class ProjectMachineController {

	@Autowired
	private ProjectMachineImportService projectMachineImportService;
	@Autowired
	private FileUploadService fileUploadService;
	@Autowired
	private ReadExcelService readExcelService;

	@ResponseBody
	@RequestMapping("getImportedProjectMachineInfo")
	public List<ImportProjectMachineInfoReturnVO> getImportedProjectMachineInfo(String supplierID) {
		return projectMachineImportService.getImportedProjectMachineInfo(supplierID);
	}

	@ResponseBody
	@RequestMapping("getImportedProjectMachineInfo_gs")
	public List<ImportProjectMachineInfo_gsReturnVO> getImportedProjectMachineInfo_gs(String companyID) {
		return projectMachineImportService.getImportedProjectMachineInfo_gs(companyID);
	}

	@ResponseBody
	@RequestMapping(value = "machineUpload", method = RequestMethod.POST)
	public void upload(HttpServletRequest request, HttpServletResponse response, ModelMap model) throws IOException {
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		// 得到上传的文件
		//String filePath = fileUploadService.returnFilePath(multipartRequest.getFile("file"), request);
		//ArrayList<String[]> data = readExcelService.readExcel(filePath, 3, 19);
		//String projectID = (String) request.getSession().getAttribute("userID");
		//ArrayList<String[]> message = new ArrayList<String[]>();
		// message = projectMachineImportService.addInfo(data, projectID);
		// return message;
		//response.getWriter().write(JSON.toJSONString(message));
	}

	@ResponseBody
	@RequestMapping(value = "machineUpload_baseMachineImport", method = RequestMethod.POST)
	public void machineUpload_baseMachineImport(HttpServletResponse response, HttpServletRequest request)
			throws IOException, FileUploadException {
		Map<String, String> map = fileUploadService.returnFilePath_baseMachineInfoImport(request);
		String filePath = map.get("filePath");
		String projectID = map.get("projectID");
		ArrayList<String[]> data = readExcelService.readExcel(filePath, 3, 10);
		String supplierID = (String) request.getSession().getAttribute("userID");
		ArrayList<String[]> message = new ArrayList<String[]>();
		message = projectMachineImportService.insertMachine_temp(data, projectID, supplierID);
		// return message;
		response.getWriter().write(JSON.toJSONString(message));
	}

	@ResponseBody
	@RequestMapping("getImportedMachineDetail")
	public List<Project_Instrument_Info_Temp> getImportedMachineDetail(String supplierID, String projectID,
			String applyState) throws IOException, FileUploadException {
		List<Project_Instrument_Info_Temp> result = projectMachineImportService.getImportedMachineDetail(supplierID,
				projectID, applyState);
		return result;
	}

	@ResponseBody
	@RequestMapping("getImportedMachineDetail_gs")
	public List<Project_Instrument_Info_Temp> getImportedMachineDetail_gs(String supplierID, String projectID,
			String applyState) throws IOException, FileUploadException {
		List<Project_Instrument_Info_Temp> result = projectMachineImportService.getImportedMachineDetail_gs(supplierID,
				projectID, applyState);
		return result;
	}

	@ResponseBody
	@RequestMapping("addSingleMachine")
	public void addSingleMachine(Project_Instrument_Info_Temp vo) {
		projectMachineImportService.addSingleMachine(vo);
	}

	@ResponseBody
	@RequestMapping("updateSingleMachine")
	public void updateSingleMachine(Project_Instrument_Info_Temp vo) {
		projectMachineImportService.updateSingleMachine(vo);
	}

	@ResponseBody
	@RequestMapping("getSingleMachineInfoByID")
	public Project_Instrument_Info_Temp getSingleMachineInfoByID(String machineID) {
		return projectMachineImportService.getSingleMachineInfoByID(machineID);
	}

	@ResponseBody
	@RequestMapping("removeMachineInfoByIDs")
	public void removeMachineInfoByIDs(String machineIDs) {
		projectMachineImportService.removeMachineInfoByIDs(machineIDs);
	}

	@ResponseBody
	@RequestMapping("toSubmitMachineApprovalApply")
	public void toSubmitMachineApprovalApply(String projectIDs, String supplierID) {
		projectMachineImportService.toSubmitMachineApprovalApply(projectIDs, supplierID);
	}

	@ResponseBody
	@RequestMapping("toPassApprovalApply")
	public void toPassApprovalApply(String machineIDs) {
		projectMachineImportService.toPassApprovalApply(machineIDs);
	}

	@ResponseBody
	@RequestMapping("toNotPassApprovalApply")
	public void toNotPassApprovalApply(String machineIDs) {
		projectMachineImportService.toNotPassApprovalApply(machineIDs);
	}

	@ResponseBody
	@RequestMapping("getSendOutProjectMachineInfo_gys")
	public List<SendOutProjectMachineInfo> getSendOutProjectMachineInfo_gys(String supplierID) {
		return projectMachineImportService.getSendOutProjectMachineInfo_gys(supplierID);
	}
	
	@ResponseBody
	@RequestMapping("getProjectMachineInfo_gs")
	public List<SendOutProjectMachineInfo_gs> getProjectMachineInfo_gs(String companyID) {
		return projectMachineImportService.getProjectMachineInfo_gs(companyID);
	}

	@ResponseBody
	@RequestMapping("viewSendOutMachineDetail_gys")
	public List<Project_Instrument_Info> viewSendOutMachineDetail_gys(String projectID, String supplierID,
			String machineState) {
		return projectMachineImportService.viewSendOutMachineDetail_gys(projectID, supplierID, machineState);
	}
	
	@ResponseBody
	@RequestMapping("viewMachineDetail_gs")
	public List<Project_Instrument_Info> viewMachineDetail_gs(String projectID, String supplierID,
			String machineState) {
		return projectMachineImportService.viewMachineDetail_gs(projectID, supplierID, machineState);
	}
	
	@ResponseBody
	@RequestMapping("toSendOutMachines")
	public void toSendOutMachines(String machineIDs) {
		projectMachineImportService.toSendOutMachines(machineIDs);
	}
	
	@ResponseBody
	@RequestMapping("getProjectMachineInfo_xm")
	public List<Project_Instrument_Info> getProjectMachineInfo_xm(String projectID) {
		return projectMachineImportService.getProjectMachineInfo_xm(projectID);
	}
	
	@ResponseBody
	@RequestMapping("saveMachineSendInInfo")
	public void saveMachineSendInInfo(String id1,String form_1,String form_2,String form_3,String form_4,String form_5,String form_6,String form_7) {
		projectMachineImportService.saveMachineSendInInfo(id1,form_1,form_2,form_3,form_4,form_5,form_6,form_7);
	}
	
	@ResponseBody
	@RequestMapping("machineToRepareOrXianzhi")
	public void machineToRepareOrXianzhi(String machineIDs,String state) {
		projectMachineImportService.machineToRepareOrXianzhi(machineIDs,state);
	}
	
	@ResponseBody
	@RequestMapping(value = "/newMachineUpload", method = RequestMethod.POST)
	public void newMachineUpload(HttpServletRequest request, HttpServletResponse response, ModelMap model) throws IOException, FileUploadException {
		Map<String, String> map = fileUploadService.returnFilePath(request);
		ArrayList<String[]> data = readExcelService.readExcel(map.get("path"),2,8);
		ArrayList<String[]> message = new ArrayList<String[]>();
		message = projectMachineImportService.applyMachineInfo(data, map.get("applyID"));
		response.getWriter().write(JSON.toJSONString(message));
	}
}
