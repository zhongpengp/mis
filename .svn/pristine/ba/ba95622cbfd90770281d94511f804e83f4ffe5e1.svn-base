package common.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import common.service.MessageService;
import common.vo.MessageVO;
import common.vo.UserVO;
import project.vo.ProjectVO;

/**
 * 消息控制器
 * @author Kaven He
 *
 */

@Controller
@RequestMapping("/message")
@EnableWebMvc
public class MessageController {
	
	@Autowired
	private MessageService messageService;
	
	/**
	 * 根据用户ID获取用户的所有消息
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/getMessageListByUserId")
	public Map<String, Object> getMessageListByUserId(String startTime,String endTime,String queryType,HttpServletRequest request
			,String msgtheme){
		List<MessageVO> list = messageService.getMessageByUserId(startTime, endTime, queryType, request, msgtheme);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("data", list);
		//map.put("total", list.size());
		return map;
	}
	/**
	 * 根据用户类型获取对应的项目信息
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/getProjectInfoByUserType")
	public List<ProjectVO> getProjectInfoByUserType(HttpServletRequest request){
		List<ProjectVO> list = messageService.getProjectInfoByUserType(request);
		return list;
	}
	
	/**
	 * 获取总公司用户列表
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/getUserByType")
	public List<UserVO> getHeadquartersUser(String userType,String userID){
		List<UserVO> list = messageService.getHeadquartersUser(userType,userID);
		return list;
	}
	/**
	 * 新增消息
	 * @param request
	 * @param response
	 * @param session
	 * @return
	 * @throws IOException
	 */
	@ResponseBody()
	@RequestMapping(value = "/msgFileUpload", produces = "text/html; charset=utf-8")
	public String fileUpload(HttpServletRequest request, HttpServletResponse response, HttpSession session)
			throws IOException {
		String path = "messageFile";
		String uploadPath = request.getSession().getServletContext().getRealPath("");
		uploadPath = uploadPath.split("mis")[0];
		int endIndex = uploadPath.lastIndexOf(File.separator);
		uploadPath = uploadPath.substring(0, endIndex + 1) + path + uploadPath.substring(endIndex, endIndex + 1);
		File dir = new File(uploadPath);
		if (!dir.exists()) {
			dir.mkdirs();
		}

		String attachmentSend=null;
		String newDate = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
		try {
			if (ServletFileUpload.isMultipartContent(request)) { // 判断获取的是不是文件
				MultipartHttpServletRequest mRequest = (MultipartHttpServletRequest) request;//request强制转换注意
				CommonsMultipartFile file = (CommonsMultipartFile) mRequest.getFile("file"); 
				if(!file.isEmpty()){
					// String name = multipartRequest.getParameter("name"); 
					String realFileName = file.getOriginalFilename(); 
					System.out.println("文件名：" + realFileName); 
					System.out.println("上传路径：" + uploadPath); 
					File dirPath = new File(uploadPath); 
					if (!dirPath.exists()) { 
					dirPath.mkdir(); 
					} 
					String newName = newDate + "."+ realFileName.substring(realFileName.lastIndexOf(".") + 1);
					File uploadFile = new File(uploadPath + newName); 
					FileCopyUtils.copy(file.getBytes(), uploadFile); 
					attachmentSend = "/messageFile/" + newName;
				}
				MessageVO msgVO = new MessageVO();
				msgVO.setMessageTheme((String)request.getParameter("messageTheme"));
				msgVO.setRecevieUserId((String)request.getParameter("recevieUserId"));
				msgVO.setMessageSend((String)request.getParameter("messageSend"));
				msgVO.setAttachmentSend(attachmentSend);
				msgVO.setSendUserId((String)request.getSession().getAttribute("userID"));
				messageService.addNewMessage(msgVO);
			}
			return "success";
		} catch (Exception ex) {
				ex.printStackTrace();
			return "error";
		}
	}
	
	/**
	 * 回复消息
	 * @param request
	 * @param response
	 * @param session
	 * @return
	 * @throws IOException
	 */
	@ResponseBody()
	@RequestMapping(value = "/recevieMessageUpLoad", produces = "text/html; charset=utf-8")
	public String recevieMessageUpLoad(HttpServletRequest request, HttpServletResponse response, HttpSession session)
			throws IOException {
		String path = "messageFile";
		String uploadPath = request.getSession().getServletContext().getRealPath("");
		uploadPath = uploadPath.split("mis")[0];
		int endIndex = uploadPath.lastIndexOf(File.separator);
		uploadPath = uploadPath.substring(0, endIndex + 1) + path + uploadPath.substring(endIndex, endIndex + 1);
		File dir = new File(uploadPath);
		if (!dir.exists()) {
			dir.mkdirs();
		}

		String attachmentReply=null;
		String newDate = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
		try {
			if (ServletFileUpload.isMultipartContent(request)) { // 判断获取的是不是文件
				MultipartHttpServletRequest mRequest = (MultipartHttpServletRequest) request;//request强制转换注意
				CommonsMultipartFile file = (CommonsMultipartFile) mRequest.getFile("file"); 
				if(!file.isEmpty()){
					// String name = multipartRequest.getParameter("name"); 
					String realFileName = file.getOriginalFilename(); 
					System.out.println("文件名：" + realFileName); 
					System.out.println("上传路径：" + uploadPath); 
					File dirPath = new File(uploadPath); 
					if (!dirPath.exists()) { 
					dirPath.mkdir(); 
					} 
					String newName = newDate + "."+ realFileName.substring(realFileName.lastIndexOf(".") + 1);
					File uploadFile = new File(uploadPath + newName); 
					FileCopyUtils.copy(file.getBytes(), uploadFile); 
					attachmentReply = "/messageFile/" + newName;
				}
				MessageVO msgVO = new MessageVO();
				msgVO.setMessageId((String)request.getParameter("messageId"));
				msgVO.setMessageReply((String)request.getParameter("messageReply"));
				msgVO.setAttachmentReply(attachmentReply);
				messageService.recevieMessage(msgVO);
			}
			return "success";
		} catch (Exception ex) {
				ex.printStackTrace();
			return "error";
		}
	}
	
	@ResponseBody
	@RequestMapping("/updateMsgRead")
	public void updateMsgRead(String msgId){
		messageService.updateMsgRead(msgId);
	}
	
}
